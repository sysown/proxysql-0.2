name: CI-3p-sqlalchemy

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      trigger:
        type: string
      infradb:
        type: string
      connector:
        type: string

env:
  TESTTREE: ${{ inputs.testtree || 'main' }}
  TESTNAME: sqlalchemy
  TESTDIST: debian12
  SHA: ${{ inputs.trigger && fromJson(inputs.trigger).event.workflow_run.head_sha || github.sha }}
  BRANCH: ${{ inputs.trigger && fromJson(inputs.trigger).event.workflow_run.head_branch || github.ref_name }}
  SUMMARY: ''

jobs:
  test:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
#        infradb: [ 'mysql57', 'mysql80', 'mysql81', 'mysql82', 'mysql83', 'mysql84', 'mysql90', 'mariadb10', 'mariadb11' ]
#        infradb: [ 'mysql57', 'mysql80', 'mysql84', 'mysql90' ]
        infradb: ${{ fromJson( inputs.infradb ) }}
#        connector: [ 'pymysql', 'mysqldb', 'asyncmy', 'mariadbconnector' ]
        connector: ${{ fromJson( inputs.connector ) }}
    env:
      INFRADB:  ${{ matrix.infradb }}
      CONNECTOR: ${{ matrix.connector }}
      BLDCACHE: ${{ fromJson(inputs.trigger).event.workflow_run.head_sha || github.sha }}_debian12_bin
      MATRIX: '(${{ matrix.infradb }},${{ matrix.connector }})'
    outputs:
      summary: ${{ steps.check_baseline.outputs.summary }}
        
    steps:
        
    - uses: LouisBrunner/checks-action@v2.0.0
      id: checks
      if: always()
      with:
        token: ${{ secrets.GH_TOKEN_SYSOWN }}
        name: '${{ github.workflow }} / ${{ github.job }} ${{ env.MATRIX }}'
        repo: ${{ github.repository }}
        sha: ${{ env.SHA }}
        status: 'in_progress'
#        action_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        details_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
    
    - name: Checkout proxysql_3p_testing
      uses: actions/checkout@v4
      with:
        repository: 'proxysql/proxysql_3p_testing'
        ref: ${{ env.TESTTREE }}
        fetch-depth: 1
        path: 'proxysql_3p_testing'
        token: ${{ secrets.GH_TOKEN_PROXYSQL }}
        sparse-checkout: |
          common
          libs
          infra-docker-hoster
          test_sqlalchemy
#          proxysql

    - name: Wait for cache
      if: ${{ env.BRANCH != 'none' }}
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN_SYSOWN }}
      run: |
        echo "Wating for cache '${BLDCACHE}' ..."
        sleep $(( $RANDOM / 1024 ))
        PROBE="$(gh cache list --limit 300 --repo ${{ github.repository }} | grep -i ${BLDCACHE} || echo '')"
        while [[ -z ${PROBE} ]]; do
          echo "Wating for cache '${BLDCACHE}' ..."
          sleep 30
          PROBE="$(gh cache list --limit 300 --repo ${{ github.repository }} | grep -i ${BLDCACHE} || echo '')"
        done
        echo "Cache available '${BLDCACHE}'"

    - name: Cache restore bin
      if: ${{ env.BRANCH != 'none' }}
      uses: actions/cache/restore@v4
      with:
        key: ${{ env.BLDCACHE }}
        fail-on-cache-miss: true
        path: |
          proxysql/.git/
          proxysql/binaries/
        
    - name: Prepare
      run: |
        set +e

        cd proxysql_3p_testing/
        ./setup.sh test_sqlalchemy/sqlalchemy
        git switch ${{ env.TESTTREE }}

        # use cached build
        rm -rf ./proxysql && mv ../proxysql . || true
                
    - name: Run tests
      run: |
        set +e
        
        cd proxysql_3p_testing/test_sqlalchemy
        #./run-tests.bash test/dialect
        ./run-tests.bash
        RC=$?
        
        #sudo chmod -R 777 ${{ github.workspace }}/*
        exit $RC
        
    - name: Check baseline
      if: ${{ !cancelled() }}
      id: check_baseline
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN_SYSOWN }}
      run: |
        cd proxysql_3p_testing/test_sqlalchemy
        #BASELINE=$(gh variable -R ${{ github.repository }} list | grep -i BASELINE_3P_SQLALCHEMY_${INFRADB//./}_${CONNECTOR//./} | awk '{ print $2 }')
        
        GHUSER="$(id -u):$(id -g)"
        sudo chown -R ${GHUSER} ./logs
        cat ./logs/*_summary.log || true
        FAILS=$(cat ./logs/*_summary.log | grep -oP '(?<=^FAIL: )\d+')
        STATUS='PASS'
        RC=0
        if [[ -z ${FAILS} ]]; then
          STATUS='ERROR'
          RC=1
        elif [[ ${FAILS} -ne 0 ]]; then
          STATUS='FAIL'
          RC=1
        fi
        SUM="{'STATUS':'${STATUS}','INFRADB':'${INFRADB}','CONNECTOR':'${CONNECTOR}','FAILS':${FAILS:-x}}"
        echo "SUMMARY=${SUM}"
        echo "SUMMARY="${SUM//\'/\"} >> $GITHUB_ENV
        exit $RC
    
    - name: Summary output
      if: ${{ !cancelled() }}
      uses: hoverkraft-tech/ci-github-common/actions/set-matrix-output@0.14.0
      with:
        value: ${{ env.SUMMARY }}
        artifact-name: ${{ github.run_number }}-${{ matrix.infradb }}-summary
      
    - name: Archive artifacts logs
      if: ${{ failure() && !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.workflow }}-${{ env.SHA }}-${{ matrix.infradb }}-${{ matrix.connector }}-logs-run#${{ github.run_number }}
        path: |
          proxysql_3p_testing/test_sqlalchemy/logs
          
    - uses: LouisBrunner/checks-action@v2.0.0
      if: always()
      with:
        token: ${{ secrets.GH_TOKEN_SYSOWN }}
        check_id: ${{ steps.checks.outputs.check_id }}
        repo: ${{ github.repository }}
        sha: ${{ env.SHA }}
        conclusion: ${{ job.status }}
#        action_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        details_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'


  summarize:
    runs-on: ubuntu-22.04
    needs: [ test ]
    continue-on-error: true
    if: ${{ !cancelled() }}
    steps:
      - name: Collect summary
        id: collect
        uses: hoverkraft-tech/ci-github-common/actions/get-matrix-outputs@0.14.0
        with:
          artifact-name: ${{ github.run_number }}-${{ matrix.infradb }}-summary
          remove-artifact: true
      
      - name: Output summary
        run:
          #echo '${{ steps.collect.outputs.result }}' | jq -c '.[]' | sort
          echo '${{ steps.collect.outputs.result }}' | jq -c '.[]' | sort >> $GITHUB_STEP_SUMMARY
